<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStar.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:AStar.Infrastructure.Data.FilesContext">
            <summary>
            The FileContext class/
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Data.FilesContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            The FileContext class/
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Data.FilesContext.Files">
            <summary>
            The list of files in the dB.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Data.FilesContext.TagsToIgnore">
            <summary>
            The list of tags to ignore.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Data.FilesContext.TagsToIgnoreCompletely">
            <summary>
            The list of tags to ignore completely.
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Data.FilesContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            The overriden OnModelCreating method.
            </summary>
            <param name="modelBuilder">
            </param>
        </member>
        <member name="T:AStar.Infrastructure.Data.FilesContextExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Data.FilesContextExtensions.FilterBySearchFolder(Microsoft.EntityFrameworkCore.DbSet{AStar.Infrastructure.Models.FileDetail},System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            The FilterBySearchFolder method will return the files matching the specified criteria.
            </summary>
            <param name="files">
            The list of files to filter.
            </param>
            <param name="startingFolder">
            The starting folder for the filter to be applied from.
            </param>
            <param name="recursive">
            A boolean to control whether the filter is applied recursively or not.
            </param>
            <param name="cancellationToken">
            An instance of <see href="CancellationToken"></see> to cancel the filter when requested.
            </param>
            <returns>
            The original list of files for further filtering.
            </returns>
        </member>
        <member name="M:AStar.Infrastructure.Data.FilesContextExtensions.GetMatchingFiles(Microsoft.EntityFrameworkCore.DbSet{AStar.Infrastructure.Models.FileDetail},System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="files">
            The list of files to filter.
            </param>
            <param name="startingFolder">
            The starting folder for the filter to be applied from.
            </param>
            <param name="recursive">
            A boolean to control whether the filter is applied recursively or not.
            </param>
            <param name="searchType">
            A string representation of the required Search Type.
            </param>
            <param name="includeSoftDeleted">
            A boolean to control whether the filter includes files marked as Soft Deleted or not.
            </param>
            <param name="includeMarkedForDeletion">
            A boolean to control whether the filter includes files marked Marked for Deletion or not.
            </param>
            <param name="excludeViewed">
            A boolean to control whether the filter includes files recently viewed or not.
            </param>
            <param name="cancellationToken">
            An instance of <see href="CancellationToken"></see> to cancel the filter when requested.
            </param>
            <returns>
            The original list of files for further filtering.
            </returns>
        </member>
        <member name="T:AStar.Infrastructure.EnumerableExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.EnumerableExtensions.FilterImagesIfApplicable(System.Collections.Generic.IEnumerable{AStar.Infrastructure.Models.FileDetail},System.String,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="files">
            </param>
            <param name="searchType">
            </param>
            <param name="cancellationToken">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:AStar.Infrastructure.EnumerableExtensions.FilterRecentlyViewed(System.Collections.Generic.IEnumerable{AStar.Infrastructure.Models.FileDetail},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="files">
            </param>
            <param name="excludeViewed">
            </param>
            <param name="cancellationToken">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:AStar.Infrastructure.EnumerableExtensions.OrderFiles(System.Collections.Generic.IEnumerable{AStar.Infrastructure.Models.FileDetail},AStar.Infrastructure.Models.SortOrder)">
            <summary>
            </summary>
            <param name="files">
            </param>
            <param name="sortOrder">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:AStar.Infrastructure.EnumerableExtensions.GetDuplicatesCount(System.Collections.Generic.IEnumerable{AStar.Infrastructure.Models.FileDetail},System.Threading.CancellationToken)">
            <summary>
            Gets the count of duplicates, grouped by Size, Height and Width.
            </summary>
            <param name="files">
            The files to return grouped together.
            </param>
            <param name="cancellationToken">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:AStar.Infrastructure.EnumerableExtensions.GetDuplicates(System.Collections.Generic.IEnumerable{AStar.Infrastructure.Models.FileDetail})">
            <summary>
            Gets the count of duplicates, grouped by Size, Height and Width.
            </summary>
            <param name="files">
            The files to return grouped together.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:AStar.Infrastructure.Migrations.AddTagTables">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.AddTagTables.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.AddTagTables.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.AddTagTables.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Infrastructure.Migrations.RemoveIsImageAndAddIsImage">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.RemoveIsImageAndAddIsImage.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.RemoveIsImageAndAddIsImage.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.RemoveIsImageAndAddIsImage.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Infrastructure.Migrations.AddDeletePending">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.AddDeletePending.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.AddDeletePending.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Infrastructure.Migrations.AddDeletePending.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Infrastructure.Models.FileDetail">
            <summary>
            The FileDetail class containing the current properties
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Models.FileDetail.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Models.FileDetail.#ctor(System.IO.FileInfo)">
            <summary>
            The copy constructor that allows for passing an instance of FileInfo to this class, simplifying consumer code.
            </summary>
            <param name="fileInfo">
            The instance of FileInfo to use.
            </param>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.FileName">
            <summary>
            Gets or sets the file name. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.IsImage">
            <summary>
            Returns true when the file is of a supported image type.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.DetailsLastUpdated">
            <summary>
            Gets or sets the date the file details were last updated. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.LastViewed">
            <summary>
            Gets or sets the date the file was last viewed. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.DirectoryName">
            <summary>
            Gets or sets the name of the directory containing the file detail. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.FullNameWithPath">
            <summary>
            Gets the full name of the file with the path combined.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.Height">
            <summary>
            Gets or sets the height of the image. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.Width">
            <summary>
            Gets or sets the width of the image. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.FileSize">
            <summary>
            Gets or sets the file size. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.SoftDeleted">
            <summary>
            Gets or sets whether the file has been 'soft deleted'. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.SoftDeletePending">
            <summary>
            Gets or sets whether the file has been marked as 'delete pending'. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.NeedsToMove">
            <summary>
            Gets or sets whether the file has been marked as 'needs to move'. I know, shocking...
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileDetail.HardDeletePending">
            <summary>
            Gets or sets whether the file has been marked as 'delete permanantely pending'. I know, shocking...
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Models.FileDetail.ToString">
            <summary>
            Returns this object in JSON format.
            </summary>
            <returns>
            This object serialized as a JSON object.
            </returns>
        </member>
        <member name="T:AStar.Infrastructure.Models.FileSize">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileSize.FileLength">
            <summary>
            Gets the file length property.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileSize.Height">
            <summary>
            Gets the file height property.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.FileSize.Width">
            <summary>
            Gets the file width property.
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Models.FileSize.Create(System.Int64,System.Int64,System.Int64)">
            <summary>
            The Create method will return a populated instance of the <see cref="T:AStar.Infrastructure.Models.FileSize" /> class.
            </summary>
            <param name="fileLength">
            The length of the file.
            </param>
            <param name="height">
            The height of the file if an image.
            </param>
            <param name="width">
            The width of the file if an image.
            </param>
            <returns>
            A populated instance of <see cref="T:AStar.Infrastructure.Models.FileSize" />.
            </returns>
        </member>
        <member name="M:AStar.Infrastructure.Models.FileSize.ToString">
            <summary>
            Returns this object in JSON format.
            </summary>
            <returns>
            This object serialized as a JSON object.
            </returns>
        </member>
        <member name="T:AStar.Infrastructure.Models.FileSizeEqualityComparer">
            <summary>
            The <see href="FileSizeEqualityComparer"></see> class that defines how the file sizes are deemed to be equal.
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Models.FileSizeEqualityComparer.Equals(AStar.Infrastructure.Models.FileSize,AStar.Infrastructure.Models.FileSize)">
            <summary>
            The Equals method has been overridden to perform the equality check currently required. The equality check is for Height, Width and Length - making this more of an ImageComparer...
            </summary>
            <param name="leftFileSize">
            An instance of the <see cref="T:AStar.Infrastructure.Models.FileSize" /> class to compare.
            </param>
            <param name="rightFileSize">
            The other instance of the <see cref="T:AStar.Infrastructure.Models.FileSize" /> class to compare.
            </param>
            <returns>
            <c>true</c> if the files are deemed to be the same size, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:AStar.Infrastructure.Models.FileSizeEqualityComparer.GetHashCode(AStar.Infrastructure.Models.FileSize)">
            <summary>
            The GetHashCode has been overridden to return the hash-codes as per the fields compared in the overridden Equals method.
            </summary>
            <param name="fileSize">
            The <see cref="T:AStar.Infrastructure.Models.FileSize" /> to calculate the appropriate hash-code for.
            </param>
            <returns>
            The hash-code, combined from the relevant properties own hash-codes.
            </returns>
        </member>
        <member name="T:AStar.Infrastructure.Models.SortOrder">
            <summary>
            The currently supported SortOrders.
            </summary>
        </member>
        <member name="T:AStar.Infrastructure.Models.TagToIgnore">
            <summary>
            The <see href="TagToIgnore"></see> class.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.TagToIgnore.Value">
            <summary>
            Gets or sets the value of the tag to ignore. I know, shocking...
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Models.TagToIgnore.ToString">
            <summary>
            Returns this object in JSON format.
            </summary>
            <returns>
            This object serialized as a JSON object.
            </returns>
        </member>
        <member name="T:AStar.Infrastructure.Models.TagToIgnoreCompletely">
            <summary>
            The <see href="TagToIgnoreCompletely"></see> class.
            </summary>
        </member>
        <member name="P:AStar.Infrastructure.Models.TagToIgnoreCompletely.Value">
            <summary>
            Gets or sets the value of the tag to ignore completely. I know, shocking...
            </summary>
        </member>
        <member name="M:AStar.Infrastructure.Models.TagToIgnoreCompletely.ToString">
            <summary>
            Returns this object in JSON format.
            </summary>
            <returns>
            This object serialized as a JSON object.
            </returns>
        </member>
    </members>
</doc>

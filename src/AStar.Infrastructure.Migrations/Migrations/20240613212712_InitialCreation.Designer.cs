// <auto-generated />
using System;
using AStar.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AStar.Infrastructure.Migrations
{
    [DbContext(typeof(FilesContext))]
    [Migration("20240613212712_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AStar.Infrastructure.Models.FileAccessDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DetailsLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HardDeletePending")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastViewed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MoveRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeletePending")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FileAccessDetails");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.FileDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileAccessDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileAccessDetailId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.ModelToIgnore", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("ModelsToIgnore");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.ScrapeConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ScrapeDirectoriesId")
                        .HasColumnType("int");

                    b.Property<int>("SearchConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("UserConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScrapeDirectoriesId");

                    b.HasIndex("SearchConfigurationId");

                    b.HasIndex("UserConfigurationId");

                    b.ToTable("ScrapeConfiguration");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.ScrapeDirectories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseDirectory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseDirectoryFamous")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseSaveDirectory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootDirectory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDirectoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScrapeDirectories");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.SearchCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LastKnownImageCount")
                        .HasColumnType("int");

                    b.Property<int>("LastPageVisited")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SearchConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SearchConfigurationId");

                    b.ToTable("SearchCategory");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.SearchConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImagePauseInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("LoginUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchStringPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchStringSuffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingPageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Subscriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionsStartingPageNumber")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionsTotalPages")
                        .HasColumnType("int");

                    b.Property<string>("TopWallpapers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopWallpapersStartingPageNumber")
                        .HasColumnType("int");

                    b.Property<int>("TopWallpapersTotalPages")
                        .HasColumnType("int");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<bool>("UseHeadless")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SearchConfiguration");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.TagToIgnore", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IgnoreImage")
                        .HasColumnType("bit");

                    b.HasKey("Value");

                    b.ToTable("TagsToIgnore");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.UserConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LoginEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserConfiguration");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.FileDetail", b =>
                {
                    b.HasOne("AStar.Infrastructure.Models.FileAccessDetail", "FileAccessDetail")
                        .WithMany()
                        .HasForeignKey("FileAccessDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileAccessDetail");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.ScrapeConfiguration", b =>
                {
                    b.HasOne("AStar.Infrastructure.Models.ScrapeDirectories", "ScrapeDirectories")
                        .WithMany()
                        .HasForeignKey("ScrapeDirectoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AStar.Infrastructure.Models.SearchConfiguration", "SearchConfiguration")
                        .WithMany()
                        .HasForeignKey("SearchConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AStar.Infrastructure.Models.UserConfiguration", "UserConfiguration")
                        .WithMany()
                        .HasForeignKey("UserConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScrapeDirectories");

                    b.Navigation("SearchConfiguration");

                    b.Navigation("UserConfiguration");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.SearchCategory", b =>
                {
                    b.HasOne("AStar.Infrastructure.Models.SearchConfiguration", null)
                        .WithMany("SearchCategories")
                        .HasForeignKey("SearchConfigurationId");
                });

            modelBuilder.Entity("AStar.Infrastructure.Models.SearchConfiguration", b =>
                {
                    b.Navigation("SearchCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
